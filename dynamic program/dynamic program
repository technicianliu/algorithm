递归到动规的一般转换方法：
    递归函数有n个参数，就定义一个n维的数组，数组的下标是递归函数参数的取值范围，
    数组元素的值是递归函数的返回值，这样就可以从边界值开始，逐步填充数组，相当于
    计算递归函数值的逆过程（可以从递归中的出状态转移方程，然后用状态转移方程计算）

动态规划解题一般思路：
    1，将原问题分解为子问题
       （1），即先考虑做一步什么操作，将原问题分解为若干个子问题，子问题和原问题形式
       相同或者类似，只不过规模变小了，子问题都解决，原问题既解决
       （2），子问题的结一旦求出就被保存，所以每个子问题只被求解一次
    2确定状态
       （1），在用动态规划解题时，将和子问题相关的各个变量的一组取值称之为一个“状态”。
              一个“状态”对应于一个或者多个子问题，某个“状态”下的值就是这个“状态”所对应
              的子问题的解。
       （2），所有状态的集合，构成问题的“状态空间”。状态空间的大小与用动态规划解决问题
              的时间复杂度直接相关，整个问题的时间复杂度是状态数目乘以计算每个状态所需
              的时间。
       （3），用动态规划解题，经常碰到的情况是，k个整型变量能构成一个状态（如数字三角形
              中的行号和列号），如果这k个整型变量的取值范围是n1，n2，n3，，nk。那么就可以
              用一个k维的数组array[n1][n2][][nk],来存储各个状态的值，这个值未必是一个整数
              或者浮点数，可能是一个需要结构才能表示的。一个状态下的值通常是一个或者多个
              子问题的解
              
    3确定一些初始状态的值。
    4确定状态转移方程
         要找出不同的状态之间如何进行迁移--也即如何从一个或多个“值”已知的状态求出另一个
         状态的值（“人人为我”递推型），状态的迁移可以用递推公式表示，此递推公式就叫状态
         转移方程
         
能用动规处理的问题的特点：
    1问题具有最优子结构性质。如果问题的最优解所包含的子问题的界也是最优的，该问题就具有
     最有子结构性质
    2无后效性。当前的若干个状态值一旦确定，则此后的演变过程就只和这若干个状态的值相关，和
     之前是采取那种手段或者经过那一条路径演变到当前的这若干个状态，没有关系。
